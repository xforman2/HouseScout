version: '3.8'

services:
  # PostgreSQL service
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"  # RabbitMQ port
      - "15672:15672"  # RabbitMQ management UI port
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend service
  backend:
    image: backend-image  # Replace with your backend image name
    depends_on:
      db:
        condition: service_healthy  # Wait for PostgreSQL health check
      rabbitmq:
        condition: service_healthy  # Wait for RabbitMQ health check
    ports:
      - "5000:80"  # Assuming backend listens on port 80 inside the container

  # DiscordBot service
  discordbot:
    image: discordbot-image  # Replace with your DiscordBot image name
    depends_on:
      backend:
        condition: service_started  # Wait for backend to start
      rabbitmq:
        condition: service_healthy  # Wait for RabbitMQ health check
    ports:
        - "8080:80"  # Assuming DiscordBot listens on port 80 inside the container

# Volumes for data persistence
volumes:
  db_data:
